#-------------------------------------------------------------------------------
# Name:        ChatGPTCli
# Purpose:     Allows the user to ask questions to chatGPT from terminal
#
# Author:      J0rd1S3rr4n0
#
# Created:     09/02/2023
# Copyright:   (c) J0rd1S3rr4n0 2023
# Licence:     Apache License 2.0 
#-------------------------------------------------------------------------------
import os, sys, signal, openai, random, termcolor

openai.api_key = ""
logo="""________________________________________________________________________________\n_______________________@@@@@@@@@@@@@@@_____________________________________________\n___________________@@@@@@@@@(___@@@@@@@@@__________________________________________\n_________________@@@@@@_______________@@@@@@@@@@@@@@@______________________________\n________________@@@@______________@@@@@@@@@/___.@@@@@@@@___________________________\n____________%@@@@@@__________@@@@@@@@@_______________@@@@@@________________________\n________@@@@@@@@@@_______@@@@@@@@______________________@@@@@_______________________\n______@@@@@@__@@@@______@@@@@___________@@@@@@___________@@@@______________________\n____@@@@@_____@@@@______@@@_________@@@@@_@@@@@@@@@______@@@@______________________\n___@@@@%______@@@@______@@@____@@@@@@__________@@@@@@@@__@@@@/_____________________\n__@@@@@_______@@@@______@@@@@@@@@_@@@@@@___________@@@@@@@@@@______________________\n__@@@@________@@@@______@@@@___________@@@@@%__________@@@@@@______________________\n__@@@@@_______@@@@______@@@_____________@@@@@@@@@_________@@@@@____________________\n___@@@@%______,@@@@@____@@@_____________@@@____@@@@@@_______@@@@___________________\n____@@@@@_________@@@@@@@@@_____________@@@______@@@@_______@@@@@__________________\n______@@@@@@___________@@@@@/__________@@@@______@@@@________@@@@__________________\n______@@@@@@@@@@___________@@@@@@_@@@@@@@@@______@@@@_______@@@@@__________________\n______@@@@__@@@@@@@@&_________@@@@@@____@@@______@@@@_______@@@@___________________\n______@@@@______,@@@@@@@@_@@@@@_________@@@______@@@@_____@@@@@____________________\n______@@@@,__________@@@@@@___________@@@@@______@@@@__@@@@@@______________________\n_______@@@@@______________________@@@@@@@@_______@@@@@@@@@@________________________\n________&@@@@@_______________@@@@@@@@@__________@@@@@@_____________________________\n___________@@@@@@@@@___@@@@@@@@@@______________@@@@________________________________\n______________@@@@@@@@@@@@@@@%______________@@@@@@_________________________________\n__________________________@@@@@@@@@,__@@@@@@@@@@___________________________________\n______________________________@@@@@@@@@@@@@@_______________________________________\n""".replace("_"," ")
minilogo="""\n________________@@@@@@@@@@@@@@______________________________\n______________@@@@__________@@@@@@@@@@@_____________________\n_____________@@@________@@@@@@________@@@@__________________\n________@@@@@@@_____@@@@@@_______________@@@________________\n______@@@@__@@@____@@(_______@@@@@@_______@@@_______________\n____@@@@____@@@____@@____@@@@_____@@@@@@__@@@_______________\n____@@@_____@@@____@@@@@*_@@@@@_______@@@@@@@_______________\n____@@@_____@@@____@@_________@@@@@_______@@@@______________\n____@@@_____@@@@___@@_________@@___@@@@_____@@@_____________\n_____@@@@_______@@@@@_________@@____@@@_____@@@_____________\n______@@@@@@@_______%@@@@_@@@@@@____@@@_____@@@_____________\n______@@@__@@@@@@_____@@@@____@@____@@@____*@@@_____________\n______@@@_______@@@@@@_______*@@____@@@__@@@@_______________\n_______@@@,______________@@@@@@_____@@@@@@@_________________\n_________@@@@@_______@@@@@@________@@@______________________\n____________@@@@@@@@@@@__________@@@@_______________________\n_____________________@@@@@@@@@@@@@@_________________________\n""".replace("_"," ")
creds = "Interactive " + termcolor.colored("ChatGPT", 'blue') + " by " + termcolor.colored("@j0rd1s3rr4n0", 'red') + "\n"

def signal_handler(sig, frame):
    print(termcolor.colored("\nExiting script. User pressed Ctrl+C\n", 'red'))
    sys.exit(0)

def banner():
    print(logo if random.randint(0, 1) == 1 else minilogo)
    print(creds)

signal.signal(signal.SIGINT, signal_handler)

config_file = ".config_chatgpt"
if os.path.exists(config_file):
    with open(config_file, "r") as file:
        openai.api_key = file.read().strip()
else:
    openai.api_key = input(termcolor.colored("Enter OpenAI API key [> ", 'yellow'))
    with open(config_file, "w") as file:
        file.write(openai.api_key)

banner()
while True:
    prompt = input(termcolor.colored("Enter query [> ", 'yellow'))
    if prompt.lower() == "exit":
        exit()
    elif prompt.lower() in ["cls", "clear"]:
        os.system("cls" if os.name == "nt" else "clear")
        banner()
    else:
        response = openai.Completion.create(
            model="code-davinci-002",
            prompt='"""\n' + prompt + '\n"""',
            temperature=0,
            max_tokens=1024,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=["\"\"\"\""]
        )
        if "choices" in response and len(response["choices"]) > 0:
            print(termcolor.colored(response["choices"][0]["text"].replace("\n+", ""), 'blue') + "\n")
        else:
            print(termcolor.colored("Error communicating with API", 'red'))
